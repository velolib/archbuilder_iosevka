@require(charvars, italic_overrides, spacings, custom_weights, use_custom_weights, contextual_widths, extra_widths, use_custom_name, custom_name)
@(
    contextual_widths = str(contextual_widths).lower()
)\
@for spacing in spacings:
@(
    if spacing == 'normal':
        plan = 'IosevkaCustom'
        family = 'Iosevka Custom'
    elif spacing == 'quasi-proportional':
        plan = 'IosevkaQpCustom'
        family = 'Iosevka QP Custom'
    elif spacing == 'quasi-proportional-extension-only':
        plan = 'IosevkaQpeCustom'
        family = 'Iosevka QPE Custom'
    elif spacing == 'fontconfig-mono':
        plan = 'IosevkaFcmCustom'
        family = 'Iosevka FCM Custom'
    else:
        plan = f"Iosevka{spacing.title()}Custom"
        family = f"Iosevka {spacing.title()} Custom"

    if use_custom_name:
        import re
        family = re.sub(r'Iosevka( [^ ]*)? Custom', custom_name + r'\1', family)
)\
[buildPlans.@{plan}]
family = "@family"
exportGlyphNames = false
buildTextureFeature = @contextual_widths
spacing = "@spacing"

[buildPlans.@{plan}.ligations]
inherits = "dlig"
# disables = []
# enables = []

[buildPlans.@{plan}.widths.Normal]
shape = 500
menu = 5
css = "normal"

@if 'condensed' in extra_widths:
[buildPlans.@{plan}.widths.Condensed]
shape = 416
menu = 3
css = "condensed"

@end
@if 'semi-condensed' in extra_widths:
[buildPlans.@{plan}.widths.SemiCondensed]
shape = 456
menu = 4
css = "semi-condensed"

@end
@if 'semi-extended' in extra_widths:
[buildPlans.@{plan}.widths.SemiExtended]
shape = 548
menu = 6
css = "semi-expanded"

@end
@if 'extended' in extra_widths:
[buildPlans.@{plan}.widths.Extended]
shape = 600
menu = 7
css = "expanded"

@end
@if 'extra-extended' in extra_widths:
[buildPlans.@{plan}.widths.ExtraExtended]
shape = 658
menu = 8
css = "extra-expanded"

@end
@if 'ultra-extended' in extra_widths:
[buildPlans.@{plan}.widths.UltraExtended]
shape = 720
menu = 9
css = "ultra-expanded"

@end
# [buildPlans.@{plan}.variants]
# inherits = "ss16"

[buildPlans.@{plan}.variants.design]
@for char, style in charvars.items():
@char = "@style"
@end

# Override above variants for each slope:
# [buildPlans.@{plan}.variants.upright]
[buildPlans.@{plan}.variants.italic]
@for char, style in italic_overrides.items():
@char = "@style"
@end

@if use_custom_weights:
@for name, weight in custom_weights.items():
[buildPlans.@{plan}.weights.@{name}]
shape = @weight['override']
menu = @weight['default']
css = @weight['default']

@end
@end
[buildPlans.@{plan}.slopes.Upright]
angle = 0
shape = "upright"
menu  = "upright"
css   = "normal"

# [buildPlans.@{plan}.slopes.Oblique]
# angle = 9.4
# shape = "oblique"
# menu  = "oblique"
# css   = "oblique"

[buildPlans.@{plan}.slopes.Italic]
angle = 9.4
shape = "italic"
menu  = "italic"
css   = "italic"

@end
